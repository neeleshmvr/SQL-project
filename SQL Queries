**Gross total sales by customer code for fiscal year 2021**
SELECT s.date, s.product_code, p.product,p.variant, s.sold_quantity, g.gross_price,
round(g.gross_price*s.sold_quantity,2) as gross_total_price
from fact_sales_monthly s
join dim_product p
on s.product_code=p.product_code
join fact_gross_price g
on g.product_code=s.product_code and 
g.fiscal_year=get_fiscal_year(s.date)
where customer_code=90002002 and
get_fiscal_year(date)=2021
order by date asc;

**Gross sales report by customer code by date**
select s.date, sum(round(g.gross_price*s.sold_quantity,2)) as 
gross_total_price from fact_sales_monthly s
join fact_gross_price g
on g.product_code=s.product_code and g.fiscal_year=get_fiscal_year(s.date)
where customer_code=90002002
group by s.date
order by s.date asc;

**Total gross sales by customer code for each fiscal year**
select g.fiscal_year, sum(round(g.gross_price*s.sold_quantity,2)) as 
gross_total_price from fact_sales_monthly s
join fact_gross_price g
on g.product_code=s.product_code and g.fiscal_year=get_fiscal_year(s.date)
where customer_code=90002002
group by g.fiscal_year
order by g.fiscal_year asc;

**Stored procedure for monthly sales by customers - which by giving customer code monthly sales can be found**
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_monthly_sales_for_customers`(
in_customer_code text)
BEGIN
select s.date, sum(
round(s.sold_quantity*g.gross_price)) as total_sales_price
 from fact_sales_monthly s
	join fact_gross_price g
    on g.product_code=s.product_code and
    g.fiscal_year=get_fiscal_year(s.date)
 where 
		find_in_set(s.customer_code, in_customer_code)>0
 group by s.date
 order by s.date asc; 
    
END

** Net sales % by customer and fiscal year**
with cte1 as (select customer, round(sum(net_sales)/1000000,2) as net_sales_mln from nett_sales n
join dim_customer c on c.customer_code=n.customer_code
where fiscal_year = 2021
group by customer) 
select *, round(net_sales_mln*100/sum(net_sales_mln) over(),2) as pct from cte1
order by net_sales_mln desc;

**Finding top 3 markets by net sales and fiscal year**
select market, round(sum(net_sales)/1000000,2) as net_sales_mln from nett_sales
where fiscal_year = 2020
group by market order by net_sales_mln desc
limit 3;

**Finding top 3 customers by net sales and fiscal year**
select customer, round(sum(net_sales)/1000000,2) as net_sales_mln from nett_sales n
join dim_customer c on c.customer_code=n.customer_code
where fiscal_year = 2020
group by customer order by net_sales_mln desc
limit 3;

**Finding top 3 products by net slaes and fiscal year**
select p.product, round(sum(net_sales)/1000000,2) as net_sales_mln from nett_sales n
join dim_product p on p.product_code=n.product_code
where fiscal_year = 2020
group by p.product order by net_sales_mln desc
limit 3;

**Wndows function - Row number(), dense_rank(), rank()**
**Finding top n by markets**
with cte1 as (select c.market, c.region, round(sum(gross_total_price/1000000),2) as 
gross_sales_mln from gross_sales s
join dim_customer c on s.customer_code=c.customer_code
where s.fiscal_year = 2021 group by market, region),
cte2 as
(select *, dense_rank() over(partition by region order by gross_sales_mln desc) as dnrk
from cte1)
select * from cte2 where dnrk<=2

**suppy chain analytics**
#---creating a helper table & TRIGGERS
create table fact_act_est(
select
      s.date as date,
      s.fiscal_year as fiscal_year,
      s.product_code as product_code,
      s.customer_code as customer_code,
      s.sold_quantity as sold_quantity,
      f.forecast_quantity as forecast_quantity
from fact_sales_monthly s left join fact_forecast_monthly f 
using (date, product_code, customer_code)
union
select
      f.date as date,
      f.fiscal_year as fiscal_year,
      f.product_code as product_code,
      f.customer_code as customer_code,
      s.sold_quantity as sold_quantity,
      f.forecast_quantity as forecast_quantity
from fact_forecast_monthly f left join fact_sales_monthly s 
using (date, product_code, customer_code)
);
#--- after creating helper table 
update fact_act_est set
sold_quantity = 0 where sold_quantity is null;

*Forecast_table*
select* from fact_act_est;
with forecast_err_pct as (select *, 
    sum((forecast_quantity-sold_quantity)) as net_err,
    sum((forecast_quantity-sold_quantity))*100/sum(forecast_quantity) as net_err_pct,
    sum(abs(forecast_quantity-sold_quantity)) as abs_err,
    sum(abs(forecast_quantity-sold_quantity))*100/sum(forecast_quantity) as abs_err_pct
from fact_act_est
where fiscal_year=2021 group by customer_code
order by abs_err_pct desc)
select c.customer_code, c.customer,c.market, e.sold_quantity, e.forecast_quantity,
e.net_err, e.net_err_pct, e.abs_err, e.abs_err_pct,
if( abs_err_pct > 100,0, (100-abs_err_pct)) as forecast_accuracy
from forecast_err_pct e
join dim_customer c using (customer_code) 
order by forecast_accuracy desc;
